/*
*    This program is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation, either version 3 of the License, or
*    (at your option) any later version.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*    ANDERSON C. SILVA				OCTOBER 2019
*/

#include "engine/include/predict.h"
#include "include/dml_operators.h"
#include "engine/include/predictor.h"

int predict(SubTARIndex subtarIndex, OperationPtr operation,
            ConfigurationManagerPtr configurationManager,
            QueryDataManagerPtr queryDataManager,
            MetadataManagerPtr metadataManager, StorageManagerPtr storageManager,
            EnginePtr engine) {

    /*
     * INCOMPLETE IMPLEMENTATION
     *  - PREDICT(DOMAIN)
     *    DOMAIN SHOULD CONTAIN THE SPATIAL DOMAIN AS DIMENSIONS AND THE INPUT DATA AS AN ATTRIBUTE
     *    PREDICT SHOULD GET THE SUBTARS FROM DOMAIN AND DO THE FOLLOWING
     *        FOR EVERY X' POINT IN THE SUBTAR
     *            H = DETERMINE_MODEL(X')
     *            VAL = USE_MODEL_TO_PREDICT(H, X')
     *            WRITE VAL TO THE OUTPUT DATASET
     *            BUFFER[X_POSITION] = VAL
     * */

    TARGeneratorPtr generator, outputGenerator;

    //input TAR is a parameter in the operation
    TARPtr inputTAR = operation->GetParametersByName("operand0")->tar;
    string modelName = operation->GetParametersByName("operand1")->literal_str;
    string predictedAttribute = operation->GetParametersByName("operand2")->literal_str;
    auto list = operation->GetParameters();


    //output TAR is generated by the current operator
    TARPtr outputTAR = operation->GetResultingTAR();

    //Setting generators for the input and output TAR
    SET_GENERATOR(generator, inputTAR->GetName());
    SET_GENERATOR(outputGenerator, outputTAR->GetName());

    //Getting current subTAR
    auto subtar = generator->GetSubtar(subtarIndex);

    //If subtar is null, return
    if(subtar == nullptr){
        return SAVIME_SUCCESS;
    }

    //Create new subtar
    SubtarPtr newSubtar = make_shared<Subtar>();
    generator->TestAndDisposeSubtar(subtarIndex);

    //Filling a new subtar with the old datasets
    for (auto entry : subtar->GetDataSets()) {
        if (outputTAR->GetDataElement(entry.first) != nullptr) {
            newSubtar->AddDataSet(entry.first, entry.second);
        }
    }

    //Obtaining Predictions
    auto *p = new Predictor();
    vector<string> predictedValues = p->getPredictions(subtar, storageManager, modelName, predictedAttribute);
    delete(p);

    newSubtar->AddDataSet("op_result", storageManager->Create(DOUBLE, predictedValues));

    //Iterating over the dimension specifications of the subtar
    for (auto entry : subtar->GetDimSpecs()) {
        newSubtar->AddDimensionsSpecification(entry.second);
    }

    //Setting output subTAR equal to the input subTAR
    outputGenerator->AddSubtar(subtarIndex, newSubtar);

    //Must return success
    return SAVIME_SUCCESS;
}

